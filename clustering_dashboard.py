# -*- coding: utf-8 -*-
"""dasboardclustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zVyxVmUyVp1MhTrT-elk07NFPsDjIpF0
"""

# ========================
# üìä Instagram Finance Clustering Dashboard (Auto Load)
# ========================

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

st.set_page_config(page_title="Instagram Finance Dashboard", layout="wide")

st.title("üìà Instagram Finance Content Insight Dashboard")

# ========================
# 1Ô∏è‚É£ Load Data Otomatis
# ========================
DATA_PATH = "fake_instagram_finance_id_fixed.csv"

try:
    df = pd.read_csv(DATA_PATH)
    st.success(f"‚úÖ Data berhasil dimuat dari file: `{DATA_PATH}` "
               f"({df.shape[0]} baris, {df.shape[1]} kolom)")
except FileNotFoundError:
    st.error(f"‚ùå File `{DATA_PATH}` tidak ditemukan. Pastikan file ada di folder yang sama.")
    st.stop()

st.dataframe(df.head(5), use_container_width=True)

def load_data(path="fake_instagram_finance_id_fixed.csv"):
    df = pd.read_csv(path)
    # normalize column names (strip)
    df.columns = df.columns.str.strip()
    # try parse date column
    if "date" in df.columns:
        df["date"] = pd.to_datetime(df["date"], errors="coerce")
    elif "tanggal" in df.columns:
        df["date"] = pd.to_datetime(df["tanggal"], errors="coerce")
    else:
        # fallback: try first column if it looks like date
        try:
            df.iloc[:,1] = pd.to_datetime(df.iloc[:,1], errors="coerce")
        except Exception:
            pass
    return df

df = load_data()

# buat kolom engagement jika belum ada
if "engagement" not in df.columns:
    df["engagement"] = df[["likes", "comments", "saves"]].fillna(0).sum(axis=1).astype(int)

# ========================
# 2Ô∏è‚É£ Clustering
# ========================
st.header("üßÆ Clustering Konten Berdasarkan Engagement Metrics")

features = df[["likes", "comments", "saves", "engagement"]].fillna(0)
scaler = StandardScaler()
scaled = scaler.fit_transform(features)

n_clusters = st.slider("Pilih jumlah cluster:", 2, 6, 3)

kmeans = KMeans(n_clusters=n_clusters, random_state=42)
df["cluster"] = kmeans.fit_predict(scaled)

st.success("‚úÖ Clustering selesai!")

pastel_colors = plt.cm.Pastel1.colors

# ========================
# 3Ô∏è‚É£ Summary Global
# ========================
st.subheader("üåü Ringkasan Umum")

top_topic_global = df.groupby("topic")["engagement"].mean().sort_values(ascending=False).head(1)
top_topic_name = top_topic_global.index[0]
top_topic_value = top_topic_global.iloc[0]

top_post_type = df.groupby("post_type")["engagement"].mean().sort_values(ascending=False).head(1)
top_post_type_name = top_post_type.index[0]
top_post_type_value = top_post_type.iloc[0]

top_cluster = df.groupby("cluster")["engagement"].mean().sort_values(ascending=False).head(1)
best_cluster_id = top_cluster.index[0] + 1
best_cluster_value = top_cluster.iloc[0]

col1, col2, col3 = st.columns(3)
col1.metric("üèÜ Topik Terbaik", top_topic_name, f"{top_topic_value:.0f} avg engagement")
col2.metric("üì± Jenis Post Efektif", top_post_type_name, f"{top_post_type_value:.0f} avg engagement")
col3.metric("üí° Cluster Paling Aktif", f"Cluster {best_cluster_id}", f"{best_cluster_value:.0f} avg engagement")

st.markdown("---")

# ========================
# 4Ô∏è‚É£ Bubble Chart Global
# ========================
st.subheader("ü´ß Visualisasi Gabungan Semua Cluster")

cluster_summary = (
    df.groupby("cluster")
    .agg({
        "likes": "mean",
        "comments": "mean",
        "saves": "mean",
        "engagement": "mean"
    })
    .reset_index()
)

fig, ax = plt.subplots(figsize=(8, 5))
scatter = ax.scatter(
    cluster_summary["likes"],
    cluster_summary["engagement"],
    s=cluster_summary["comments"] * 5,
    c=cluster_summary["cluster"],
    cmap="Pastel1",
    alpha=0.8,
    edgecolors="k"
)
ax.set_xlabel("Rata-rata Likes")
ax.set_ylabel("Rata-rata Engagement")
ax.set_title("Hubungan Likes vs Engagement (Bubble = Comments)")
for i, row in cluster_summary.iterrows():
    ax.text(row["likes"], row["engagement"], f"C{int(row['cluster'])+1}", ha="center", fontsize=9, weight="bold")

st.pyplot(fig)

st.markdown("### üí° Pola Umum Antar Cluster")
max_eng_cluster = cluster_summary.loc[cluster_summary["engagement"].idxmax(), "cluster"] + 1
min_eng_cluster = cluster_summary.loc[cluster_summary["engagement"].idxmin(), "cluster"] + 1
st.info(
    f"Cluster {max_eng_cluster} memiliki engagement tertinggi, sedangkan Cluster {min_eng_cluster} cenderung rendah. "
    "Perbedaan ini menunjukkan variasi gaya konten dan topik yang menarik audiens."
)

st.markdown("---")

# ========================
# 5Ô∏è‚É£ Analisis Tiap Cluster
# ========================
st.subheader("üîç Analisis Tiap Cluster")

for c in sorted(df["cluster"].unique()):
    st.markdown(f"## üîπ Cluster {c + 1}")

    top_posts = (
        df[df["cluster"] == c]
        .sort_values(by="engagement", ascending=False)
        .head(3)
    )

    if top_posts.empty:
        st.info("Tidak ada posting untuk cluster ini.")
        continue

    table = top_posts[
        ["date", "caption", "topic", "post_type", "likes", "comments", "saves", "engagement"]
    ].copy()
    table["caption"] = table["caption"].apply(lambda x: x[:80] + "..." if len(x) > 80 else x)
    st.dataframe(table, use_container_width=True)

    top_topic = top_posts["topic"].mode()[0]
    top_type = top_posts["post_type"].mode()[0]
    avg_eng = top_posts["engagement"].mean()
    top_caption = top_posts.iloc[0]["caption"]

    insight = f"""
    üí° **Insight Cluster {c + 1}:**
    - Dominan topik: **{top_topic}**
    - Jenis posting unggulan: **{top_type}**
    - Engagement rata-rata: **{avg_eng:.0f}**
    - Contoh caption unggulan:
      ‚Äú_{top_caption[:100]}..._‚Äù
    """
    st.markdown(insight)

    st.markdown("### üìä Rata-rata Engagement per Topik (Cluster Ini)")
    cluster_data = df[df["cluster"] == c]
    avg_engagement_per_topic = (
        cluster_data.groupby("topic")["engagement"]
        .mean()
        .sort_values(ascending=False)
    )

    fig, ax = plt.subplots()
    avg_engagement_per_topic.plot(kind="bar", ax=ax, color=pastel_colors[c % len(pastel_colors)])
    ax.set_xlabel("Topik")
    ax.set_ylabel("Rata-rata Engagement")
    ax.set_title(f"Cluster {c + 1} ‚Äî Engagement per Topik")
    st.pyplot(fig)

    st.markdown("---")